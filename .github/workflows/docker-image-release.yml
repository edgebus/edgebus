#
# Copied from https://github.com/zxteamorg/.github/blob/master/workflow-templates/docker-image-release.yml
#
# See for documentation at https://github.com/zxteamorg/.github/blob/master/workflow-templates/docker-image.md
#

name: Docker Images (Release)

env:
  # Repo-root relative path to directory with your Dockerfile(s)
  DOCKER_FILES_DIR: docker
  # Comma separated list of Docker platforms
  DOCKER_PLATFORMS: linux/amd64
  # Define one of test report format: dart-json, dotnet-trx, flutter-json, java-junit, jest-junit, mocha-json
  TEST_REPORT_FORMAT: java-junit
  # Set path to GitHub Container Repository
  REGISTRY_GHCR_REPOSITORY_PATH: "${{ github.repository }}"
  #REGISTRY_GHCR_REPOSITORY_PATH: "${{ github.repository }}/orphan-branch"
  # To enable publish into Docker Hub (https://hub.docker.com/)
  # by set Docker Hub user/organization ID
  #REGISTRY_DOCKERHUB_REPOSITORY_ORG: "${{ github.repository_owner }}"

on:
  push:
    tags:
      - '*'

run-name: Docker Images (${{ format('{0}.{1}', github.ref_name, github.sha) }})

jobs:
  configure:
    runs-on: ubuntu-latest
    outputs:
      build_app_dockerfiles: ${{ steps.dockerfiles.outputs.app_dockerfiles }}
      build_app_dockerfiles_count: ${{ steps.dockerfiles.outputs.app_dockerfiles_count }}
      build_commit_short_sha: ${{ steps.build_vars.outputs.commit_short_sha }}
      build_commit_ref: ${{ steps.build_vars.outputs.commit_ref }}
      build_commit_timestamp: ${{ steps.build_vars.outputs.commit_timestamp }}
      build_dockerhub_publish: ${{ steps.build_vars.outputs.dockerhub_publish }}
      build_image_tag_version: ${{ steps.build_vars.outputs.image_tag_version }}
      build_image_tag_version_major: ${{ steps.build_vars.outputs.image_tag_version_major }}
      build_image_tag_version_major_minor: ${{ steps.build_vars.outputs.image_tag_version_major_minor }}
      build_is_release_candidate: ${{ steps.build_vars.outputs.is_release_candidate }}
      build_pipeline_url: ${{ steps.build_vars.outputs.pipeline_url }}
      build_project_url: ${{ steps.build_vars.outputs.project_url }}
      build_rc_version: ${{ steps.build_vars.outputs.rc_version }}
      build_tag_version: ${{ steps.build_vars.outputs.tag_version }}
      build_tag_version_major: ${{ steps.build_vars.outputs.tag_version_major }}
      build_tag_version_major_minor: ${{ steps.build_vars.outputs.tag_version_major_minor }}
      build_version_appender: ${{ steps.build_vars.outputs.version_appender }}
      build_platforms: ${{ steps.platforms.outputs.platforms }}
      build_platforms_count: ${{ steps.platforms.outputs.platforms_count }}
      build_test_dockerfiles: ${{ steps.dockerfiles.outputs.test_dockerfiles }}
      build_test_dockerfiles_count: ${{ steps.dockerfiles.outputs.test_dockerfiles_count }}
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Detect build platforms
      id: platforms
      run: |
        PLATFORMS_JSON_ARRAY=$(echo "\"$DOCKER_PLATFORMS\""  | jq -c 'split(",")')
        PLATFORMS_COUNT=$(echo "${PLATFORMS_JSON_ARRAY}" | jq '. | length')
        echo "Build for ${PLATFORMS_COUNT} platform(s): ${DOCKER_PLATFORMS}"
        echo "platforms=${PLATFORMS_JSON_ARRAY}" | tee -a "${GITHUB_OUTPUT}"
        echo "platforms_count=${PLATFORMS_COUNT}" | tee -a "${GITHUB_OUTPUT}"

    - name: Detect Dockerfiles
      id: dockerfiles
      run: |
        DOCKER_FILES=$(cd "${DOCKER_FILES_DIR}" && find * -type f -name 'Dockerfile*')
        declare -a DOCKER_APP_FILES=()
        declare -a DOCKER_TEST_FILES=()
        for DOCKER_FILE in ${DOCKER_FILES}; do
          if echo "${DOCKER_FILE}" | egrep -qe '^Dockerfile.*\.test(-[0-9a-z]([0-9a-z_\-]*[0-9a-z])?)?$'; then
            DOCKER_TEST_FILES+=("${DOCKER_FILE}")
          elif echo "${DOCKER_FILE}" | egrep -qe '^Dockerfile(\.[0-9a-z]([0-9a-z_\-]*[0-9a-z])?)?$'; then
            DOCKER_APP_FILES+=("${DOCKER_FILE}")
          fi
        done

        COMMA_SEPARATED_DOCKER_APP_FILES=$(IFS=,; echo "${DOCKER_APP_FILES[*]}")
        COMMA_SEPARATED_DOCKER_TEST_FILES=$(IFS=,; echo "${DOCKER_TEST_FILES[*]}")

        echo "Found ${#DOCKER_APP_FILES[@]} application Dockerfile(s): ${COMMA_SEPARATED_DOCKER_APP_FILES}"
        echo "Found ${#DOCKER_TEST_FILES[@]} test Dockerfile(s): ${COMMA_SEPARATED_DOCKER_TEST_FILES}"

        DOCKER_APP_FILES_JSON_ARRAY=$(echo "\"$COMMA_SEPARATED_DOCKER_APP_FILES\""  | jq -c 'split(",")')
        DOCKER_TEST_FILES_JSON_ARRAY=$(echo "\"$COMMA_SEPARATED_DOCKER_TEST_FILES\""  | jq -c 'split(",")')

        echo "app_dockerfiles=${DOCKER_APP_FILES_JSON_ARRAY}" | tee -a "${GITHUB_OUTPUT}"
        echo "app_dockerfiles_count=${#DOCKER_APP_FILES[@]}" | tee -a "${GITHUB_OUTPUT}"
        echo "test_dockerfiles=${DOCKER_TEST_FILES_JSON_ARRAY}" | tee -a "${GITHUB_OUTPUT}"
        echo "test_dockerfiles_count=${#DOCKER_TEST_FILES[@]}" | tee -a "${GITHUB_OUTPUT}"

    - name: Build variables
      id: build_vars
      run: |
        BUILD_RC_VERSION=""
        if echo -n "${{ github.ref_name }}" | egrep -qe '-rc[0-9]+$'; then
          BUILD_RC_VERSION="$(echo -n "${{ github.ref_name }}" | sed 's/^.*-rc//')"
        fi
        SHORT_SHA=$(echo "${{ github.sha }}" | head -c 8)
        BUILD_PIPELINE_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        BUILD_COMMIT_REF="${{ github.sha }}"
        BUILD_COMMIT_TIMESTAMP="${{ github.event.head_commit.timestamp }}"
        BUILD_PROJECT_URL="${{ github.server_url }}/${{ github.repository }}"
        if [ -n "${BUILD_RC_VERSION}" ]; then
          BUILD_TAG_VERSION="$(echo -n "${{ github.ref_name }}" | rev | cut -d- -f2 | rev)"
          BUILD_VERSION_APPENDER="-rc${BUILD_RC_VERSION}"
          BUILD_IS_RELEASE_CANDIDATE="yes"
          BUILD_IMAGE_TAG_VERSION="${BUILD_TAG_VERSION}-rc${BUILD_RC_VERSION}"
        else
          BUILD_TAG_VERSION=$(echo -n "${{ github.ref_name }}" | rev | cut -d- -f1 | rev)
          BUILD_VERSION_APPENDER=""
          BUILD_IS_RELEASE_CANDIDATE="no"
          BUILD_TAG_VERSION_MAJOR="$(echo "${BUILD_TAG_VERSION}" | cut -d. -f1)"
          BUILD_TAG_VERSION_MAJOR_MINOR="$(echo "${BUILD_TAG_VERSION}" | cut -d. -f1-2)"
          BUILD_IMAGE_TAG_VERSION="${BUILD_TAG_VERSION}"
          BUILD_IMAGE_TAG_VERSION_MAJOR="${BUILD_TAG_VERSION_MAJOR}"
          BUILD_IMAGE_TAG_VERSION_MAJOR_MINOR="${BUILD_TAG_VERSION_MAJOR_MINOR}"
        fi

        echo "commit_short_sha=${SHORT_SHA}" | tee -a "${GITHUB_OUTPUT}"
        echo "commit_ref=${BUILD_COMMIT_REF}" | tee -a "${GITHUB_OUTPUT}"
        echo "commit_timestamp=${BUILD_COMMIT_TIMESTAMP}" | tee -a "${GITHUB_OUTPUT}"
        if [ -n "${REGISTRY_DOCKERHUB_REPOSITORY_ORG}" ]; then
          echo "dockerhub_publish=yes" | tee -a "${GITHUB_OUTPUT}"
        else
          echo "dockerhub_publish=no" | tee -a "${GITHUB_OUTPUT}"
        fi
        echo "image_tag_version=${BUILD_IMAGE_TAG_VERSION}" | tee -a "${GITHUB_OUTPUT}"
        echo "image_tag_version_major=${BUILD_IMAGE_TAG_VERSION_MAJOR}" | tee -a "${GITHUB_OUTPUT}"
        echo "image_tag_version_major_minor=${BUILD_IMAGE_TAG_VERSION_MAJOR_MINOR}" | tee -a "${GITHUB_OUTPUT}"
        echo "is_release_candidate=${BUILD_IS_RELEASE_CANDIDATE}" | tee -a "${GITHUB_OUTPUT}"
        echo "pipeline_url=${BUILD_PIPELINE_URL}" | tee -a "${GITHUB_OUTPUT}"
        echo "project_url=${BUILD_PROJECT_URL}" | tee -a "${GITHUB_OUTPUT}"
        echo "rc_version=${BUILD_RC_VERSION}" | tee -a "${GITHUB_OUTPUT}"
        echo "tag_version=${BUILD_TAG_VERSION}" | tee -a "${GITHUB_OUTPUT}"
        echo "tag_version_major=${BUILD_TAG_VERSION_MAJOR}" | tee -a "${GITHUB_OUTPUT}"
        echo "tag_version_major_minor=${BUILD_TAG_VERSION_MAJOR_MINOR}" | tee -a "${GITHUB_OUTPUT}"
        echo "version_appender=${BUILD_VERSION_APPENDER}" | tee -a "${GITHUB_OUTPUT}"

  docker-build:
    needs:
    - configure
    strategy:
      matrix:
        dockerfile: ${{ fromJson(needs.configure.outputs.build_app_dockerfiles) }}
    runs-on: ubuntu-latest
    steps:
    - name: Set up environment variables
      run: |
        SUFFIX=$(echo "${{ matrix.dockerfile }}" | cut -d'.' -f2-)
        if [ -n "${SUFFIX}" -a "${SUFFIX}" != "Dockerfile" ]; then
          echo "DOCKERFILE_NAME_SUFFIX=/${SUFFIX}" | tee -a "${GITHUB_ENV}"
        fi

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to the GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build docker image
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ${{ env.DOCKER_FILES_DIR }}/${{ matrix.dockerfile }}
        build-args: |
          BUILD_CONFIGURATION=release
          BUILD_COMMIT_REF=${{ needs.configure.outputs.build_commit_ref }}
          BUILD_COMMIT_TIMESTAMP=${{ needs.configure.outputs.build_commit_timestamp }}
          BUILD_PIPELINE_URL=${{ needs.configure.outputs.build_pipeline_url }}
          BUILD_PROJECT_URL=${{ needs.configure.outputs.build_project_url }}
          BUILD_RC_VERSION=${{ needs.configure.outputs.build_rc_version }}
          BUILD_TAG_VERSION=${{ needs.configure.outputs.build_tag_version }}
          BUILD_VERSION_APPENDER=${{ needs.configure.outputs.build_version_appender }}
        platforms: ${{ join(fromJson(needs.configure.outputs.build_platforms), ',') }}
        push: true
        tags: "ghcr.io/${{ env.REGISTRY_GHCR_REPOSITORY_PATH }}${{ env.DOCKERFILE_NAME_SUFFIX }}:${{ needs.configure.outputs.build_image_tag_version }}.${{ github.sha }}"

  docker-test:
    needs:
    - configure
    - docker-build
    if: needs.configure.outputs.build_test_dockerfiles_count > 0
    strategy:
      matrix:
        dockerfile: ${{ fromJson(needs.configure.outputs.build_test_dockerfiles) }}
        platform: ${{ fromJson(needs.configure.outputs.build_platforms) }}
    runs-on: ubuntu-latest
    steps:
    - name: Set up environment variables
      run: |
        PLATFORM_SLUG=$(echo "${{ matrix.platform }}" | sed 's~/~-~g')
        echo "PLATFORM_SLUG=${PLATFORM_SLUG}" | tee -a "${GITHUB_ENV}"
        APP_DOCKER_FILE=$(echo "${{ matrix.dockerfile }}" | sed 's/\.[^.]*$//')
        SUFFIX=$(echo "${APP_DOCKER_FILE}" | cut -d'.' -f2-)
        if [ -n "${SUFFIX}" -a "${SUFFIX}" != "Dockerfile" ]; then
          echo "APP_DOCKER_IMAGE_SUFFIX=/${SUFFIX}" | tee -a "${GITHUB_ENV}"
          GEN_IMAGE_SUFFIX="-${SUFFIX}" | tee -a "${GITHUB_ENV}"
        fi
        echo "GEN_IMAGE_TAG=test-release-image${GEN_IMAGE_SUFFIX}-${PLATFORM_SLUG}" | tee -a "${GITHUB_ENV}"

    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Build tests image
      id: test-prepare
      run: |
        docker build \
          --platform=${{ matrix.platform }} \
          --build-arg TEST_IMAGE="ghcr.io/${{ env.REGISTRY_GHCR_REPOSITORY_PATH }}${APP_DOCKER_IMAGE_SUFFIX}:${{ needs.configure.outputs.build_image_tag_version }}.${{ github.sha }}" \
          --build-arg BUILD_CONFIGURATION=release \
          --tag "${GEN_IMAGE_TAG}" \
          --file "${DOCKER_FILES_DIR}/${{ matrix.dockerfile }}" \
          .

    - name: Run tests
      run: |
        docker run --rm \
          --platform=${{ matrix.platform }} \
          --volume "${PWD}/.${GEN_IMAGE_TAG}:/test-results" \
          "${GEN_IMAGE_TAG}"

    - name: Upload tests results
      id: upload-artifact
      uses: actions/upload-artifact@v3
      with:
        name: "test-results-release-${{ env.PLATFORM_SLUG }}${{ env.GEN_IMAGE_SUFFIX }}"
        path: .${{ env.GEN_IMAGE_TAG }}
        retention-days: 10
      if: steps.test-prepare.conclusion == 'success'

    - name: Generate JUnit test report
      uses: dorny/test-reporter@v1
      with:
        name: JUnit Tests Report (${{ matrix.dockerfile }}, ${{ matrix.platform }})
        path: .${{ env.GEN_IMAGE_TAG }}/junit-report.xml
        reporter: java-junit
        fail-on-error: true
      if: env.TEST_REPORT_FORMAT == 'java-junit' && steps.upload-artifact.conclusion == 'success'

  publish-dockerhub:
    needs:
    - configure
    - docker-test
    strategy:
      matrix:
        dockerfile: ${{ fromJson(needs.configure.outputs.build_app_dockerfiles) }}
    if: |
      always() &&
      needs.configure.outputs.build_dockerhub_publish == 'yes' &&
      needs.configure.outputs.build_is_release_candidate == 'no' &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    runs-on: ubuntu-latest
    steps:
    - name: Set up environment variables
      run: |
        SUFFIX=$(echo "${{ matrix.dockerfile }}" | cut -d'.' -f2-)
        if [ -n "${SUFFIX}" -a "${SUFFIX}" != "Dockerfile" ]; then
          echo "DOCKER_IMAGE_NAME=${SUFFIX}" | tee -a "${GITHUB_ENV}"
          echo "DOCKERFILE_NAME_SUFFIX=/${SUFFIX}" | tee -a "${GITHUB_ENV}"
        else
          REPOSITORY_NAME=$(echo "${{ github.repository }}" | cut -d/ -f2)
          echo "DOCKER_IMAGE_NAME=${REPOSITORY_NAME}" | tee -a "${GITHUB_ENV}"
        fi

    - name: Log in to the GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Log in to the Docker Hub Registry
      uses: docker/login-action@v2
      with:
        username: ${{ vars.REGISTRY_DOCKERHUB_PUSH_USERNAME }}
        password: ${{ secrets.REGISTRY_DOCKERHUB_PUSH_TOKEN }}

    - name: Tags and push
      run: |
        skopeo copy --all \
          "docker://ghcr.io/${{ env.REGISTRY_GHCR_REPOSITORY_PATH }}${DOCKERFILE_NAME_SUFFIX}:${{ needs.configure.outputs.build_image_tag_version }}.${{ github.sha }}" \
          "docker://${REGISTRY_DOCKERHUB_REPOSITORY_ORG}/${DOCKER_IMAGE_NAME}:${{ needs.configure.outputs.build_image_tag_version }}"
        if [ "${{ needs.configure.outputs.build_is_release_candidate }}" == "no" ]; then
          skopeo copy --all \
            "docker://ghcr.io/${{ env.REGISTRY_GHCR_REPOSITORY_PATH }}${DOCKERFILE_NAME_SUFFIX}:${{ needs.configure.outputs.build_image_tag_version }}.${{ github.sha }}" \
            "docker://${REGISTRY_DOCKERHUB_REPOSITORY_ORG}/${DOCKER_IMAGE_NAME}:${{ needs.configure.outputs.build_image_tag_version_major_minor }}"
          skopeo copy --all \
            "docker://ghcr.io/${{ env.REGISTRY_GHCR_REPOSITORY_PATH }}${DOCKERFILE_NAME_SUFFIX}:${{ needs.configure.outputs.build_image_tag_version }}.${{ github.sha }}" \
            "docker://${REGISTRY_DOCKERHUB_REPOSITORY_ORG}/${DOCKER_IMAGE_NAME}:${{ needs.configure.outputs.build_image_tag_version_major }}"
          skopeo copy --all \
            "docker://ghcr.io/${{ env.REGISTRY_GHCR_REPOSITORY_PATH }}${DOCKERFILE_NAME_SUFFIX}:${{ needs.configure.outputs.build_image_tag_version }}.${{ github.sha }}" \
            "docker://${REGISTRY_DOCKERHUB_REPOSITORY_ORG}/${DOCKER_IMAGE_NAME}:latest"
        fi

  publish-dockerhub-readme:
    needs:
    - configure
    - docker-test
    - publish-dockerhub
    strategy:
      matrix:
        dockerfile: ${{ fromJson(needs.configure.outputs.build_app_dockerfiles) }}
    if: |
      always() &&
      needs.configure.outputs.build_dockerhub_publish == 'yes' &&
      needs.configure.outputs.build_is_release_candidate == 'no' &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Set up environment variables
      run: |
        SUFFIX=$(echo "${{ matrix.dockerfile }}" | cut -d'.' -f2-)
        if [ -n "${SUFFIX}" -a "${SUFFIX}" != "Dockerfile" ]; then
          echo "DOCKER_IMAGE_NAME=${SUFFIX}" | tee -a "${GITHUB_ENV}"
          echo "README_FILE_NAME_SUFFIX=.${SUFFIX}" | tee -a "${GITHUB_ENV}"
        else
          REPOSITORY_NAME=$(echo "${{ github.repository }}" | cut -d/ -f2)
          echo "DOCKER_IMAGE_NAME=${REPOSITORY_NAME}" | tee -a "${GITHUB_ENV}"
        fi

    - name: Update image README and description
      uses: peter-evans/dockerhub-description@v3
      with:
        username: ${{ vars.REGISTRY_DOCKERHUB_PUSH_USERNAME }}
        password: ${{ secrets.REGISTRY_DOCKERHUB_PUSH_TOKEN }}
        repository: ${{ env.REGISTRY_DOCKERHUB_REPOSITORY_ORG }}/${{ env.DOCKER_IMAGE_NAME }}
        short-description: ${{ github.event.repository.description }}
        readme-filepath: ${{ env.DOCKER_FILES_DIR }}/README${{ env.README_FILE_NAME_SUFFIX }}.md

  publish-github:
    needs:
    - configure
    - docker-test
    if: |
      always() &&
      !contains(needs.*.result, 'failure') &&
      !contains(needs.*.result, 'cancelled')
    strategy:
      matrix:
        dockerfile: ${{ fromJson(needs.configure.outputs.build_app_dockerfiles) }}
    runs-on: ubuntu-latest
    steps:
    - name: Set up environment variables
      run: |
        SUFFIX=$(echo "${{ matrix.dockerfile }}" | cut -d'.' -f2-)
        if [ -n "${SUFFIX}" -a "${SUFFIX}" != "Dockerfile" ]; then
          echo "DOCKERFILE_NAME_SUFFIX=/${SUFFIX}" | tee -a "${GITHUB_ENV}"
        fi

    - name: Log in to the GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Tags and push
      run: |
        skopeo copy --all \
          "docker://ghcr.io/${{ env.REGISTRY_GHCR_REPOSITORY_PATH }}${DOCKERFILE_NAME_SUFFIX}:${{ needs.configure.outputs.build_image_tag_version }}.${{ github.sha }}" \
          "docker://ghcr.io/${{ env.REGISTRY_GHCR_REPOSITORY_PATH }}${DOCKERFILE_NAME_SUFFIX}:${{ needs.configure.outputs.build_image_tag_version }}.${{ needs.configure.outputs.build_commit_short_sha }}"
        skopeo copy --all \
          "docker://ghcr.io/${{ env.REGISTRY_GHCR_REPOSITORY_PATH }}${DOCKERFILE_NAME_SUFFIX}:${{ needs.configure.outputs.build_image_tag_version }}.${{ github.sha }}" \
          "docker://ghcr.io/${{ env.REGISTRY_GHCR_REPOSITORY_PATH }}${DOCKERFILE_NAME_SUFFIX}:${{ needs.configure.outputs.build_image_tag_version }}"
        if [ "${{ needs.configure.outputs.build_is_release_candidate }}" == "no" ]; then
          skopeo copy --all \
            "docker://ghcr.io/${{ env.REGISTRY_GHCR_REPOSITORY_PATH }}${DOCKERFILE_NAME_SUFFIX}:${{ needs.configure.outputs.build_image_tag_version }}.${{ github.sha }}" \
            "docker://ghcr.io/${{ env.REGISTRY_GHCR_REPOSITORY_PATH }}${DOCKERFILE_NAME_SUFFIX}:${{ needs.configure.outputs.build_image_tag_version_major_minor }}"
          skopeo copy --all \
            "docker://ghcr.io/${{ env.REGISTRY_GHCR_REPOSITORY_PATH }}${DOCKERFILE_NAME_SUFFIX}:${{ needs.configure.outputs.build_image_tag_version }}.${{ github.sha }}" \
            "docker://ghcr.io/${{ env.REGISTRY_GHCR_REPOSITORY_PATH }}${DOCKERFILE_NAME_SUFFIX}:${{ needs.configure.outputs.build_image_tag_version_major }}"
          skopeo copy --all \
            "docker://ghcr.io/${{ env.REGISTRY_GHCR_REPOSITORY_PATH }}${DOCKERFILE_NAME_SUFFIX}:${{ needs.configure.outputs.build_image_tag_version }}.${{ github.sha }}" \
            "docker://ghcr.io/${{ env.REGISTRY_GHCR_REPOSITORY_PATH }}${DOCKERFILE_NAME_SUFFIX}:latest"
        fi